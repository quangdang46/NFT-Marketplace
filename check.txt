## Quy trình kết nối ví bằng RainbowKit, NestJS, Redis, và JWT

### 1. Giao diện (Next.js + RainbowKit)

#### Bước 1: Người dùng mở ứng dụng và kiểm tra trạng thái xác thực
- Khi ứng dụng tải lên (`useEffect`), frontend kiểm tra xem `auth_token` có trong cookie không.
- Nếu không có, đặt trạng thái `unauthenticated`, nếu có thì gọi API `/auth/me` để xác thực.

#### Bước 2: Người dùng chọn kết nối ví
- RainbowKit yêu cầu **nonce** từ backend qua API `/auth/nonce`.
- Nonce là chuỗi ngẫu nhiên được backend tạo và lưu trong Redis, giúp chống lại **replay attack**.

#### Bước 3: Người dùng ký thông điệp (SIWE)
- Dựa vào nonce, frontend tạo thông điệp SIWE (Sign-In With Ethereum), yêu cầu người dùng ký bằng private key của ví.

#### Bước 4: Gửi chữ ký lên backend để xác thực
- Chữ ký và thông điệp được gửi đến `/auth/verify` trên backend.
- Backend sử dụng thư viện `ethers` để xác minh xem chữ ký có khớp với địa chỉ ví hay không.

#### Bước 5: Backend tạo JWT và gửi về frontend
- Nếu xác thực thành công, backend:
  - Tạo hoặc tìm user trong database.
  - Tạo **JWT token**, lưu vào Redis với TTL (24h).
  - Gửi JWT token về frontend.
  - Lưu JWT vào cookie (httpOnly, secure, sameSite=strict) để tránh bị đánh cắp.

#### Bước 6: Frontend cập nhật trạng thái đăng nhập
- Nếu JWT hợp lệ, trạng thái `authStatus` chuyển sang `"authenticated"`, giao diện hiển thị các tính năng dành cho người đã đăng nhập.

---

### 2. Backend (NestJS + Redis + JWT)

#### Bước 1: Tạo nonce khi frontend yêu cầu
- Khi frontend gọi `/auth/nonce`, backend:
  - Sinh nonce ngẫu nhiên.
  - Lưu nonce vào Redis với TTL (5 phút).
  - Gửi nonce về frontend.

#### Bước 2: Xác thực chữ ký từ frontend
- Khi frontend gửi **message** và **signature** lên `/auth/verify`, backend thực hiện:
  - Xác minh chữ ký sử dụng `ethers.verifyMessage(message, signature)`, lấy địa chỉ ví.
  - Kiểm tra nonce trong Redis có hợp lệ không.
  - Nếu hợp lệ:
    - Tạo JWT token chứa thông tin user.
    - Lưu token vào Redis (`token:${address}`) với TTL 24h.
    - Trả về JWT cho frontend.

#### Bước 3: Lấy thông tin người dùng từ JWT
- Khi frontend gọi `/auth/me` để kiểm tra trạng thái đăng nhập:
  - Backend giải mã JWT.
  - Nếu token hợp lệ, trả về thông tin người dùng.

#### Bước 4: Ngắt kết nối ví
- Khi người dùng đăng xuất (`/auth/logout`):
  - Xóa JWT khỏi Redis (`token:${address}`).
  - Xóa cookie `auth_token`.
  - Trả về phản hồi xác nhận đăng xuất thành công.

---

### 3. Tóm tắt quy trình
1. Frontend kiểm tra `auth_token`.
2. Kết nối ví:
   - Lấy nonce từ backend.
   - Ký thông điệp SIWE.
   - Gửi chữ ký lên backend.
   - Backend xác minh, tạo JWT, gửi về frontend.
3. Đăng xuất:
   - Xóa token trong Redis.
   - Xóa cookie `auth_token`.
   - Cập nhật trạng thái `unauthenticated`. 

