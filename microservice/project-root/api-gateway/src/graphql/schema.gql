# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type UserResponse {
  id: String!
  address: String!
}

type AuthResponse {
  accessToken: String!
  refreshToken: String!
}

type PublicMint {
  mintPrice: String!
  startDate: String!
  durationDays: String!
  durationHours: String!
}

type AllowlistStage {
  id: String!
  mintPrice: String!
  startDate: String!
  durationDays: String!
  durationHours: String!
  wallets: [String!]!
}

type Collection {
  id: String!
  name: String!
  chainId: String!
  image: String!
  mintPrice: String!
  maxSupply: String!
  mintStartDate: String!
  publicMint: PublicMint
  allowlistStages: [AllowlistStage!]
  chain: String!
  createdAt: String!
  totalMinted: String!
  creatorId: String!
  isVerified: Boolean!
  status: String!
}

type Stats {
  artworks: Float!
  artists: Float!
  collectors: Float!
}

type CreateCollectionStep {
  id: String!
  params: String!
}

type CreateCollectionResponse {
  collectionId: String
  contractAddress: String
  steps: [CreateCollectionStep!]
}

type ApproveCollectionResponse {
  success: Boolean!
}

type PendingCollection {
  collectionId: String!
  name: String!
  creatorId: String!
  creatorRole: String!
  createdAt: String!
}

type CollectionsResponse {
  collections: [Collection!]!
  stats: Stats!
}

type User {
  id: String!
  username: String!
  role: String!
  email: String!
  wallet_address: String!
  is_verified: Boolean!
}

type CreateUserResponse {
  userId: String!
}

type VerifyUserResponse {
  status: String!
}

type Query {
  nonce: String!
  me: UserResponse!
  getPendingCollections: [PendingCollection!]!
  getCollections(chainId: String): CollectionsResponse!
  getUser(userId: String!): User!
  getSignedUrl: String!
}

type Mutation {
  verify(message: String!, signature: String!): AuthResponse!
  logout: Boolean!
  refreshToken(refreshToken: String!): AuthResponse!
  createCollection(input: CreateCollectionInput!): CreateCollectionResponse!
  approveCollection(collectionId: String!): ApproveCollectionResponse!
  createUser(username: String!, email: String!, _address: String!, role: String): CreateUserResponse!
  verifyUser(userId: String!): VerifyUserResponse!
}

input CreateCollectionInput {
  chain: String!
  chainId: String!
  name: String!
  description: String!
  artType: String!
  uri: String!
  collectionImageUrl: String!
  mintPrice: String!
  royaltyFee: String!
  maxSupply: String!
  mintLimit: String!
  mintStartDate: String!
  allowlistStages: [AllowlistStageInput!]!
  publicMint: PublicMintInput!
  contractAddress: String
}

input AllowlistStageInput {
  id: String!
  mintPrice: String!
  durationDays: String!
  durationHours: String!
  wallets: [String!]!
  startDate: String!
}

input PublicMintInput {
  mintPrice: String!
  durationDays: String!
  durationHours: String!
  startDate: String
}