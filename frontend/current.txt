"use client";

import { QueryClientProvider } from "@tanstack/react-query";
import { queryClient } from "../lib/api/reactQueryClient";
import { ApolloProvider } from "@apollo/client";
import apolloClient from "@/lib/api/apolloClient";
import { WagmiProvider } from "wagmi";
import { config } from "@/lib/blockchain/wallet";
// import { ThirdwebProvider } from "thirdweb/react";
export function Providers({ children }: { children: React.ReactNode }) {
  return (
    <WagmiProvider config={config}>
      <QueryClientProvider client={queryClient}>
        <ApolloProvider client={apolloClient}>{children}</ApolloProvider>
      </QueryClientProvider>
    </WagmiProvider>
  );
}



import { BadRequestException, Inject, Injectable, UnauthorizedException } from '@nestjs/common';
import { JwtService } from '@nestjs/jwt';
import { InjectModel } from '@nestjs/mongoose';
import { InjectRepository } from '@nestjs/typeorm';
import { Response } from 'express';
import { Model } from 'mongoose';
import { User } from 'src/database/entities/user.entity';
import { Log } from 'src/database/mongodb/schemas/log.schema';
import { Repository } from 'typeorm';
import { InjectRedis } from '@nestjs-modules/ioredis';
import { ethers } from 'ethers';
import { Redis } from 'ioredis';
@Injectable()
export class AuthV1Service {
  constructor(
    @InjectRepository(User)
    private readonly userRepository: Repository<User>,
    @InjectModel(Log.name)
    private readonly logModel: Model<Log>,
    @InjectRedis() private readonly redis: Redis,
    private readonly jwtService: JwtService,
  ) {}

  verifySignature = (
    address: string,
    message: string,
    signature: string,
  ): boolean => {
    const recoveredAddress = ethers.verifyMessage(message, signature);
    return recoveredAddress.toLowerCase() === address.toLowerCase();
  };

  async authenticateWallet(body: {
    address: string;
    message: string;
    signature: string;
    nonce: string;
  }) {
    const { address, message, signature, nonce } = body;

    if (!address || !ethers.isAddress(address)) {
      throw new BadRequestException('Địa chỉ ví không hợp lệ');
    }

    const storedNonce = await this.redis.get(`nonce:${address}`);
    if (!storedNonce || storedNonce !== nonce) {
      throw new UnauthorizedException('Nonce không hợp lệ');
    }

    await this.redis.del(`nonce:${address}`);

    if (!this.verifySignature(address, message, signature)) {
      throw new UnauthorizedException('Xác thực thất bại verifySignature');
    }

    let user = await this.userRepository.findOne({ where: { address } });
    if (!user) {
      user = this.userRepository.create({ address });
      await this.userRepository.save(user);
    }

    // Tạo JWT
    const payload = { sub: address };
    const token = this.jwtService.sign(payload);

    await this.redis.set(`token:${address}`, token, 'EX', 24 * 60 * 60);

    // Ghi log vào MongoDB
    await this.logModel.create({
      address,
      action: 'connect-wallet',
      timestamp: new Date(),
    });

    return token;
  }

  // Lưu token vào cookie
  saveTokenToCookie(res: Response, token: string) {
    res.cookie('auth_token', token, {
      maxAge: 24 * 60 * 60 * 1000, // Hết hạn sau 1 ngày
      httpOnly: true, // Cookie không thể truy cập từ JavaScript
      secure: true, // Chỉ gửi qua HTTPS secure: process.env.NODE_ENV === 'production',
      sameSite: 'strict', // Ngăn chặn CSRF
    });
  }

  // Xóa token khỏi cookie
  removeTokenFromCookie(res: Response) {
    res.clearCookie('auth_token', {
      httpOnly: true,
      secure: true,
      sameSite: 'strict',
    });
  }

  async getNonce(address: string) {
    if (!address || !ethers.isAddress(address)) {
      throw new BadRequestException('Địa chỉ ví không hợp lệ');
    }

    // Kiểm tra nonce trong Redis
    let nonce = await this.redis.get(`nonce:${address}`);

    if (!nonce) {
      // Tạo nonce mới nếu chưa có
      nonce = Math.random().toString(36).substring(2, 15);
      await this.redis.set(`nonce:${address}`, nonce, 'EX', 300);
    }

    return { address, nonce };
  }
}





import {
  BadRequestException,
  Body,
  Controller,
  Get,
  HttpCode,
  Post,
  Query,
  Req,
  Res,
  UseGuards,
} from '@nestjs/common';
import { Response } from 'express';
import { AuthV1Service } from 'src/auth/v1/auth.service';
import { JwtGuard } from 'src/auth/v1/guards/jwt/jwt.guard';
import { JwtPayload } from 'src/types/auth.types';
import { ethers } from 'ethers';
import {
  ApiTags,
  ApiOperation,
  ApiResponse,
  ApiBearerAuth,
  ApiBody,
  ApiQuery,
} from '@nestjs/swagger';




@ApiTags('Authentication') // Gán API vào nhóm "Authentication"
@Controller({ path: 'auth', version: '1' })
export class AuthV1Controller {
  constructor(private readonly authService: AuthV1Service) {}



  
  @HttpCode(200)
  @Post('connect-wallet')
  @ApiOperation({ summary: 'Xác thực ví và lấy JWT' })
  @ApiResponse({ status: 200, description: 'Kết nối ví thành công' })
  @ApiResponse({ status: 400, description: 'Lỗi xác thực' })
  @ApiBody({
    schema: {
      type: 'object',
      properties: {
        address: { type: 'string', example: '0x123...abc' },
        message: { type: 'string', example: 'Đăng nhập vào hệ thống' },
        signature: { type: 'string', example: '0xabc...def' },
        nonce: { type: 'string', example: 'random_nonce_123' },
      },
    },
  })
  async connectWallet(
    @Body()
    body: {
      address: string;
      message: string;
      signature: string;
      nonce: string;
    },
    @Res() res: Response,
  ) {
    const token = await this.authService.authenticateWallet(body);
    if (!token) {
      return res.send({ message: 'Xác thực thất bại connectWallet' });
    }
    this.authService.saveTokenToCookie(res, token);
    return res.send({ message: 'Kết nối ví thành công', token });
  }

  @UseGuards(JwtGuard)
  @Post('disconnect-wallet')
  @ApiOperation({ summary: 'Ngắt kết nối ví' })
  @ApiResponse({ status: 200, description: 'Đã ngắt kết nối ví' })
  @ApiBearerAuth()
  disconnectWallet(@Res() res: Response) {
    this.authService.removeTokenFromCookie(res);

    return res.send({ message: 'Đã ngắt kết nối ví' });
  }

  @Get('get-nonce')
  @ApiOperation({ summary: 'Lấy nonce để xác thực' })
  @ApiResponse({ status: 200, description: 'Nonce được tạo thành công' })
  @ApiResponse({ status: 400, description: 'Địa chỉ ví không hợp lệ' })
  @ApiQuery({ name: 'address', type: 'string', example: '0x123...abc' })
  async getNonce(@Query('address') address: string) {
    if (!address || !ethers.isAddress(address)) {
      throw new BadRequestException('Địa chỉ ví không hợp lệ');
    }
    return this.authService.getNonce(address);
  }





  @UseGuards(JwtGuard)
  @Get('profile')
  @ApiOperation({ summary: 'Lấy thông tin người dùng' })
  @ApiResponse({ status: 200, description: 'Thông tin người dùng' })
  @ApiBearerAuth()
  getProfile(@Req() req: Request & { user?: JwtPayload }) {
    return req.user;
  }
}
